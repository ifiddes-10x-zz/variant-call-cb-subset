filetype bam;
filetype csv;
filetype tsv;
filetype vcf;
filetype vcf.gz;
filetype h5;

stage PARSE_INPUTS(
    in csv barcodes,
    in h5 tree_data,
    in csv barnyard,
    in int min_cells,
    out string[] barcode_subsets,
    out string[] node_ids,
    src py "stages/parse_inputs",
)

stage FILTER_BAM(
    in bam possorted_bam,
    in string reference_path,
    in string[] barcode_subsets,
    in string[] node_ids,
    out bam[] subset_bams,
    out string[] subset_bam_keys,
    src py "stages/filter_bam_by_cb",
) split using(
    in string cluster_bcs,
    in string[] locus,
    out bam subset_bam,
)

stage MERGE_BAMS(
    in bam[] subset_bams,
    in string[] subset_bam_keys,
    out bam[] merged_bams,
    src py "stages/merge_subset_bams",
) split using(
    in bam node_bams,
    out bam merged_bam,
)

stage CALL_SNPINDELS_SUBSET(
    in string targets_file,
    in bam[] merged_bams,
    in string[] barcode_subsets,
    in string[] node_ids,
    in string reference_path,
    in string gatk_path,
    out vcf.gz variants,
    out tsv barcode_map,
    src py "stages/call_snpindels_subset",
) split using(
    in bam subset_bam,
    in string locus,
    out vcf subset_variants,
)